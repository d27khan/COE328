// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/10/2020 20:57:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    GPU3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module GPU3_vlg_sample_tst(
	A,
	B,
	Clock,
	data_in,
	En,
	Reset,
	Resetn,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input  Clock;
input  data_in;
input  En;
input  Reset;
input  Resetn;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or Clock or data_in or En or Reset or Resetn)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module GPU3_vlg_check_tst (
	current_state,
	leds,
	neg,
	OP,
	R1,
	R2,
	sign,
	student_ID,
	sampler_rx
);
input [3:0] current_state;
input [0:6] leds;
input  neg;
input [0:15] OP;
input [3:0] R1;
input [3:0] R2;
input [0:6] sign;
input [3:0] student_ID;
input sampler_rx;

reg [3:0] current_state_expected;
reg [0:6] leds_expected;
reg  neg_expected;
reg [0:15] OP_expected;
reg [3:0] R1_expected;
reg [3:0] R2_expected;
reg [0:6] sign_expected;
reg [3:0] student_ID_expected;

reg [3:0] current_state_prev;
reg [0:6] leds_prev;
reg  neg_prev;
reg [0:15] OP_prev;
reg [3:0] R1_prev;
reg [3:0] R2_prev;
reg [0:6] sign_prev;
reg [3:0] student_ID_prev;

reg [3:0] current_state_expected_prev;
reg [0:6] leds_expected_prev;
reg [0:15] OP_expected_prev;
reg [3:0] R1_expected_prev;
reg [3:0] R2_expected_prev;
reg [0:6] sign_expected_prev;
reg [3:0] student_ID_expected_prev;

reg [3:0] last_current_state_exp;
reg [0:6] last_leds_exp;
reg [0:15] last_OP_exp;
reg [3:0] last_R1_exp;
reg [3:0] last_R2_exp;
reg [0:6] last_sign_exp;
reg [3:0] last_student_ID_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	current_state_prev = current_state;
	leds_prev = leds;
	neg_prev = neg;
	OP_prev = OP;
	R1_prev = R1;
	R2_prev = R2;
	sign_prev = sign;
	student_ID_prev = student_ID;
end

// update expected /o prevs

always @(trigger)
begin
	current_state_expected_prev = current_state_expected;
	leds_expected_prev = leds_expected;
	OP_expected_prev = OP_expected;
	R1_expected_prev = R1_expected;
	R2_expected_prev = R2_expected;
	sign_expected_prev = sign_expected;
	student_ID_expected_prev = student_ID_expected;
end


// expected current_state[ 3 ]
initial
begin
	current_state_expected[3] = 1'bX;
end 
// expected current_state[ 2 ]
initial
begin
	current_state_expected[2] = 1'bX;
end 
// expected current_state[ 1 ]
initial
begin
	current_state_expected[1] = 1'bX;
end 
// expected current_state[ 0 ]
initial
begin
	current_state_expected[0] = 1'bX;
end 
// expected OP[ 15 ]
initial
begin
	OP_expected[15] = 1'bX;
end 
// expected OP[ 14 ]
initial
begin
	OP_expected[14] = 1'bX;
end 
// expected OP[ 13 ]
initial
begin
	OP_expected[13] = 1'bX;
end 
// expected OP[ 12 ]
initial
begin
	OP_expected[12] = 1'bX;
end 
// expected OP[ 11 ]
initial
begin
	OP_expected[11] = 1'bX;
end 
// expected OP[ 10 ]
initial
begin
	OP_expected[10] = 1'bX;
end 
// expected OP[ 9 ]
initial
begin
	OP_expected[9] = 1'bX;
end 
// expected OP[ 8 ]
initial
begin
	OP_expected[8] = 1'bX;
end 
// expected OP[ 7 ]
initial
begin
	OP_expected[7] = 1'bX;
end 
// expected OP[ 6 ]
initial
begin
	OP_expected[6] = 1'bX;
end 
// expected OP[ 5 ]
initial
begin
	OP_expected[5] = 1'bX;
end 
// expected OP[ 4 ]
initial
begin
	OP_expected[4] = 1'bX;
end 
// expected OP[ 3 ]
initial
begin
	OP_expected[3] = 1'bX;
end 
// expected OP[ 2 ]
initial
begin
	OP_expected[2] = 1'bX;
end 
// expected OP[ 1 ]
initial
begin
	OP_expected[1] = 1'bX;
end 
// expected OP[ 0 ]
initial
begin
	OP_expected[0] = 1'bX;
end 
// expected R1[ 3 ]
initial
begin
	R1_expected[3] = 1'bX;
end 
// expected R1[ 2 ]
initial
begin
	R1_expected[2] = 1'bX;
end 
// expected R1[ 1 ]
initial
begin
	R1_expected[1] = 1'bX;
end 
// expected R1[ 0 ]
initial
begin
	R1_expected[0] = 1'bX;
end 
// expected R2[ 3 ]
initial
begin
	R2_expected[3] = 1'bX;
end 
// expected R2[ 2 ]
initial
begin
	R2_expected[2] = 1'bX;
end 
// expected R2[ 1 ]
initial
begin
	R2_expected[1] = 1'bX;
end 
// expected R2[ 0 ]
initial
begin
	R2_expected[0] = 1'bX;
end 
// expected leds[ 6 ]
initial
begin
	leds_expected[6] = 1'bX;
end 
// expected leds[ 5 ]
initial
begin
	leds_expected[5] = 1'bX;
end 
// expected leds[ 4 ]
initial
begin
	leds_expected[4] = 1'bX;
end 
// expected leds[ 3 ]
initial
begin
	leds_expected[3] = 1'bX;
end 
// expected leds[ 2 ]
initial
begin
	leds_expected[2] = 1'bX;
end 
// expected leds[ 1 ]
initial
begin
	leds_expected[1] = 1'bX;
end 
// expected leds[ 0 ]
initial
begin
	leds_expected[0] = 1'bX;
end 
// expected sign[ 6 ]
initial
begin
	sign_expected[6] = 1'bX;
end 
// expected sign[ 5 ]
initial
begin
	sign_expected[5] = 1'bX;
end 
// expected sign[ 4 ]
initial
begin
	sign_expected[4] = 1'bX;
end 
// expected sign[ 3 ]
initial
begin
	sign_expected[3] = 1'bX;
end 
// expected sign[ 2 ]
initial
begin
	sign_expected[2] = 1'bX;
end 
// expected sign[ 1 ]
initial
begin
	sign_expected[1] = 1'bX;
end 
// expected sign[ 0 ]
initial
begin
	sign_expected[0] = 1'bX;
end 
// expected student_ID[ 3 ]
initial
begin
	student_ID_expected[3] = 1'bX;
end 
// expected student_ID[ 2 ]
initial
begin
	student_ID_expected[2] = 1'bX;
end 
// expected student_ID[ 1 ]
initial
begin
	student_ID_expected[1] = 1'bX;
end 
// expected student_ID[ 0 ]
initial
begin
	student_ID_expected[0] = 1'bX;
end 
// generate trigger
always @(current_state_expected or current_state or leds_expected or leds or neg_expected or neg or OP_expected or OP or R1_expected or R1 or R2_expected or R2 or sign_expected or sign or student_ID_expected or student_ID)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected current_state = %b | expected leds = %b | expected neg = %b | expected OP = %b | expected R1 = %b | expected R2 = %b | expected sign = %b | expected student_ID = %b | ",current_state_expected_prev,leds_expected_prev,neg_expected_prev,OP_expected_prev,R1_expected_prev,R2_expected_prev,sign_expected_prev,student_ID_expected_prev);
	$display("| real current_state = %b | real leds = %b | real neg = %b | real OP = %b | real R1 = %b | real R2 = %b | real sign = %b | real student_ID = %b | ",current_state_prev,leds_prev,neg_prev,OP_prev,R1_prev,R2_prev,sign_prev,student_ID_prev);
`endif
	if (
		( current_state_expected_prev[0] !== 1'bx ) && ( current_state_prev[0] !== current_state_expected_prev[0] )
		&& ((current_state_expected_prev[0] !== last_current_state_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_state_expected_prev);
		$display ("     Real value = %b", current_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_state_exp[0] = current_state_expected_prev[0];
	end
	if (
		( current_state_expected_prev[1] !== 1'bx ) && ( current_state_prev[1] !== current_state_expected_prev[1] )
		&& ((current_state_expected_prev[1] !== last_current_state_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_state_expected_prev);
		$display ("     Real value = %b", current_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_state_exp[1] = current_state_expected_prev[1];
	end
	if (
		( current_state_expected_prev[2] !== 1'bx ) && ( current_state_prev[2] !== current_state_expected_prev[2] )
		&& ((current_state_expected_prev[2] !== last_current_state_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_state_expected_prev);
		$display ("     Real value = %b", current_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_state_exp[2] = current_state_expected_prev[2];
	end
	if (
		( current_state_expected_prev[3] !== 1'bx ) && ( current_state_prev[3] !== current_state_expected_prev[3] )
		&& ((current_state_expected_prev[3] !== last_current_state_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_state[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_state_expected_prev);
		$display ("     Real value = %b", current_state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_state_exp[3] = current_state_expected_prev[3];
	end
	if (
		( leds_expected_prev[0] !== 1'bx ) && ( leds_prev[0] !== leds_expected_prev[0] )
		&& ((leds_expected_prev[0] !== last_leds_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[0] = leds_expected_prev[0];
	end
	if (
		( leds_expected_prev[1] !== 1'bx ) && ( leds_prev[1] !== leds_expected_prev[1] )
		&& ((leds_expected_prev[1] !== last_leds_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[1] = leds_expected_prev[1];
	end
	if (
		( leds_expected_prev[2] !== 1'bx ) && ( leds_prev[2] !== leds_expected_prev[2] )
		&& ((leds_expected_prev[2] !== last_leds_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[2] = leds_expected_prev[2];
	end
	if (
		( leds_expected_prev[3] !== 1'bx ) && ( leds_prev[3] !== leds_expected_prev[3] )
		&& ((leds_expected_prev[3] !== last_leds_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[3] = leds_expected_prev[3];
	end
	if (
		( leds_expected_prev[4] !== 1'bx ) && ( leds_prev[4] !== leds_expected_prev[4] )
		&& ((leds_expected_prev[4] !== last_leds_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[4] = leds_expected_prev[4];
	end
	if (
		( leds_expected_prev[5] !== 1'bx ) && ( leds_prev[5] !== leds_expected_prev[5] )
		&& ((leds_expected_prev[5] !== last_leds_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[5] = leds_expected_prev[5];
	end
	if (
		( leds_expected_prev[6] !== 1'bx ) && ( leds_prev[6] !== leds_expected_prev[6] )
		&& ((leds_expected_prev[6] !== last_leds_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leds[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leds_expected_prev);
		$display ("     Real value = %b", leds_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_leds_exp[6] = leds_expected_prev[6];
	end
	if (
		( OP_expected_prev[0] !== 1'bx ) && ( OP_prev[0] !== OP_expected_prev[0] )
		&& ((OP_expected_prev[0] !== last_OP_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OP_exp[0] = OP_expected_prev[0];
	end
	if (
		( OP_expected_prev[1] !== 1'bx ) && ( OP_prev[1] !== OP_expected_prev[1] )
		&& ((OP_expected_prev[1] !== last_OP_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OP_exp[1] = OP_expected_prev[1];
	end
	if (
		( OP_expected_prev[2] !== 1'bx ) && ( OP_prev[2] !== OP_expected_prev[2] )
		&& ((OP_expected_prev[2] !== last_OP_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OP_exp[2] = OP_expected_prev[2];
	end
	if (
		( OP_expected_prev[3] !== 1'bx ) && ( OP_prev[3] !== OP_expected_prev[3] )
		&& ((OP_expected_prev[3] !== last_OP_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OP_exp[3] = OP_expected_prev[3];
	end
	if (
		( OP_expected_prev[4] !== 1'bx ) && ( OP_prev[4] !== OP_expected_prev[4] )
		&& ((OP_expected_prev[4] !== last_OP_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OP_exp[4] = OP_expected_prev[4];
	end
	if (
		( OP_expected_prev[5] !== 1'bx ) && ( OP_prev[5] !== OP_expected_prev[5] )
		&& ((OP_expected_prev[5] !== last_OP_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OP_exp[5] = OP_expected_prev[5];
	end
	if (
		( OP_expected_prev[6] !== 1'bx ) && ( OP_prev[6] !== OP_expected_prev[6] )
		&& ((OP_expected_prev[6] !== last_OP_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OP_exp[6] = OP_expected_prev[6];
	end
	if (
		( OP_expected_prev[7] !== 1'bx ) && ( OP_prev[7] !== OP_expected_prev[7] )
		&& ((OP_expected_prev[7] !== last_OP_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OP_exp[7] = OP_expected_prev[7];
	end
	if (
		( OP_expected_prev[8] !== 1'bx ) && ( OP_prev[8] !== OP_expected_prev[8] )
		&& ((OP_expected_prev[8] !== last_OP_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OP_exp[8] = OP_expected_prev[8];
	end
	if (
		( OP_expected_prev[9] !== 1'bx ) && ( OP_prev[9] !== OP_expected_prev[9] )
		&& ((OP_expected_prev[9] !== last_OP_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OP_exp[9] = OP_expected_prev[9];
	end
	if (
		( OP_expected_prev[10] !== 1'bx ) && ( OP_prev[10] !== OP_expected_prev[10] )
		&& ((OP_expected_prev[10] !== last_OP_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OP_exp[10] = OP_expected_prev[10];
	end
	if (
		( OP_expected_prev[11] !== 1'bx ) && ( OP_prev[11] !== OP_expected_prev[11] )
		&& ((OP_expected_prev[11] !== last_OP_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OP_exp[11] = OP_expected_prev[11];
	end
	if (
		( OP_expected_prev[12] !== 1'bx ) && ( OP_prev[12] !== OP_expected_prev[12] )
		&& ((OP_expected_prev[12] !== last_OP_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OP_exp[12] = OP_expected_prev[12];
	end
	if (
		( OP_expected_prev[13] !== 1'bx ) && ( OP_prev[13] !== OP_expected_prev[13] )
		&& ((OP_expected_prev[13] !== last_OP_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OP_exp[13] = OP_expected_prev[13];
	end
	if (
		( OP_expected_prev[14] !== 1'bx ) && ( OP_prev[14] !== OP_expected_prev[14] )
		&& ((OP_expected_prev[14] !== last_OP_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OP_exp[14] = OP_expected_prev[14];
	end
	if (
		( OP_expected_prev[15] !== 1'bx ) && ( OP_prev[15] !== OP_expected_prev[15] )
		&& ((OP_expected_prev[15] !== last_OP_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OP_exp[15] = OP_expected_prev[15];
	end
	if (
		( R1_expected_prev[0] !== 1'bx ) && ( R1_prev[0] !== R1_expected_prev[0] )
		&& ((R1_expected_prev[0] !== last_R1_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp[0] = R1_expected_prev[0];
	end
	if (
		( R1_expected_prev[1] !== 1'bx ) && ( R1_prev[1] !== R1_expected_prev[1] )
		&& ((R1_expected_prev[1] !== last_R1_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp[1] = R1_expected_prev[1];
	end
	if (
		( R1_expected_prev[2] !== 1'bx ) && ( R1_prev[2] !== R1_expected_prev[2] )
		&& ((R1_expected_prev[2] !== last_R1_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp[2] = R1_expected_prev[2];
	end
	if (
		( R1_expected_prev[3] !== 1'bx ) && ( R1_prev[3] !== R1_expected_prev[3] )
		&& ((R1_expected_prev[3] !== last_R1_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp[3] = R1_expected_prev[3];
	end
	if (
		( R2_expected_prev[0] !== 1'bx ) && ( R2_prev[0] !== R2_expected_prev[0] )
		&& ((R2_expected_prev[0] !== last_R2_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp[0] = R2_expected_prev[0];
	end
	if (
		( R2_expected_prev[1] !== 1'bx ) && ( R2_prev[1] !== R2_expected_prev[1] )
		&& ((R2_expected_prev[1] !== last_R2_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp[1] = R2_expected_prev[1];
	end
	if (
		( R2_expected_prev[2] !== 1'bx ) && ( R2_prev[2] !== R2_expected_prev[2] )
		&& ((R2_expected_prev[2] !== last_R2_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp[2] = R2_expected_prev[2];
	end
	if (
		( R2_expected_prev[3] !== 1'bx ) && ( R2_prev[3] !== R2_expected_prev[3] )
		&& ((R2_expected_prev[3] !== last_R2_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp[3] = R2_expected_prev[3];
	end
	if (
		( sign_expected_prev[0] !== 1'bx ) && ( sign_prev[0] !== sign_expected_prev[0] )
		&& ((sign_expected_prev[0] !== last_sign_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sign_exp[0] = sign_expected_prev[0];
	end
	if (
		( sign_expected_prev[1] !== 1'bx ) && ( sign_prev[1] !== sign_expected_prev[1] )
		&& ((sign_expected_prev[1] !== last_sign_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sign_exp[1] = sign_expected_prev[1];
	end
	if (
		( sign_expected_prev[2] !== 1'bx ) && ( sign_prev[2] !== sign_expected_prev[2] )
		&& ((sign_expected_prev[2] !== last_sign_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sign_exp[2] = sign_expected_prev[2];
	end
	if (
		( sign_expected_prev[3] !== 1'bx ) && ( sign_prev[3] !== sign_expected_prev[3] )
		&& ((sign_expected_prev[3] !== last_sign_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sign_exp[3] = sign_expected_prev[3];
	end
	if (
		( sign_expected_prev[4] !== 1'bx ) && ( sign_prev[4] !== sign_expected_prev[4] )
		&& ((sign_expected_prev[4] !== last_sign_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sign_exp[4] = sign_expected_prev[4];
	end
	if (
		( sign_expected_prev[5] !== 1'bx ) && ( sign_prev[5] !== sign_expected_prev[5] )
		&& ((sign_expected_prev[5] !== last_sign_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sign_exp[5] = sign_expected_prev[5];
	end
	if (
		( sign_expected_prev[6] !== 1'bx ) && ( sign_prev[6] !== sign_expected_prev[6] )
		&& ((sign_expected_prev[6] !== last_sign_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sign_exp[6] = sign_expected_prev[6];
	end
	if (
		( student_ID_expected_prev[0] !== 1'bx ) && ( student_ID_prev[0] !== student_ID_expected_prev[0] )
		&& ((student_ID_expected_prev[0] !== last_student_ID_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_ID[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_ID_expected_prev);
		$display ("     Real value = %b", student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_student_ID_exp[0] = student_ID_expected_prev[0];
	end
	if (
		( student_ID_expected_prev[1] !== 1'bx ) && ( student_ID_prev[1] !== student_ID_expected_prev[1] )
		&& ((student_ID_expected_prev[1] !== last_student_ID_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_ID[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_ID_expected_prev);
		$display ("     Real value = %b", student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_student_ID_exp[1] = student_ID_expected_prev[1];
	end
	if (
		( student_ID_expected_prev[2] !== 1'bx ) && ( student_ID_prev[2] !== student_ID_expected_prev[2] )
		&& ((student_ID_expected_prev[2] !== last_student_ID_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_ID[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_ID_expected_prev);
		$display ("     Real value = %b", student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_student_ID_exp[2] = student_ID_expected_prev[2];
	end
	if (
		( student_ID_expected_prev[3] !== 1'bx ) && ( student_ID_prev[3] !== student_ID_expected_prev[3] )
		&& ((student_ID_expected_prev[3] !== last_student_ID_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port student_ID[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", student_ID_expected_prev);
		$display ("     Real value = %b", student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_student_ID_exp[3] = student_ID_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#300000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module GPU3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg Clock;
reg data_in;
reg En;
reg Reset;
reg Resetn;
// wires                                               
wire [3:0] current_state;
wire [0:6] leds;
wire neg;
wire [0:15] OP;
wire [3:0] R1;
wire [3:0] R2;
wire [0:6] sign;
wire [3:0] student_ID;

wire sampler;                             

// assign statements (if any)                          
GPU3 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Clock(Clock),
	.current_state(current_state),
	.data_in(data_in),
	.En(En),
	.leds(leds),
	.neg(neg),
	.OP(OP),
	.R1(R1),
	.R2(R2),
	.Reset(Reset),
	.Resetn(Resetn),
	.sign(sign),
	.student_ID(student_ID)
);

// Clock
always
begin
	Clock = 1'b0;
	Clock = #10000 1'b1;
	#10000;
end 

// data_in
initial
begin
	data_in = 1'b0;
	data_in = #20000 1'b1;
end 

// En
initial
begin
	En = 1'b1;
end 

// Reset
initial
begin
	Reset = 1'b1;
	Reset = #10000 1'b0;
end 

// Resetn
initial
begin
	Resetn = 1'b0;
	Resetn = #10000 1'b1;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b1;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 

GPU3_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.Clock(Clock),
	.data_in(data_in),
	.En(En),
	.Reset(Reset),
	.Resetn(Resetn),
	.sampler_tx(sampler)
);

GPU3_vlg_check_tst tb_out(
	.current_state(current_state),
	.leds(leds),
	.neg(neg),
	.OP(OP),
	.R1(R1),
	.R2(R2),
	.sign(sign),
	.student_ID(student_ID),
	.sampler_rx(sampler)
);
endmodule

